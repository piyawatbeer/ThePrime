var app = new Vue({
    el: '#app',
    data: {
        data: {}
    }
});
$(document).ready(function () {
    $.ajaxSetup({
        headers: {
            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        }
    });

    // $('#country').change(function () {
    //     $('#state').val('');
    //     $('#city').val('');
    // });




    /* handle tables */
    var table = $('#boq-table').DataTable({
        responsive: true,
        // order: [[1, ""]],
        scrollY: "true",
        scrollX: "true",
        scrollCollapse: true,
        processing: true,
        serverSide: true,
        ajax: APP_URL + '/boq/datatables',

        "columnDefs": [
            { "visible": false, "targets": 0 }
        ],
        //  "order": [[0, 'asc']],
        "displayLength": 100,
        "drawCallback": function (settings) {
            var api = this.api();
            var rows = api.rows({ page: 'current' }).nodes();
            var last = null;

            api.column(0, { page: 'current' }).data().each(function (group, i) {
                if (last !== group) {

                    $(rows).eq(i).before(
                        '<tr class="group table-secondary text-left "><td colspan="13">' + group + '</td></tr>'
                    );

                    last = group;
                }
            });
            api.column(1, { page: 'current' }).data().each(function (group, i) {
                if (last !== group) {

                    $(rows).eq(i).before(
                        '<tr class="group  text-left "><td></td><td colspan="12">' + group + '</td></tr>'
                    );

                    last = group;
                }
            });
            api.column(2, { page: 'current' }).data().each(function (group, i) {
                if (last !== group) {

                    $(rows).eq(i).before(
                        '<tr class="group  text-left "><td></td><td></td><td colspan="11">' + group + '</td></tr>'
                    );

                    last = group;
                }
            });
            api.column(3, { page: 'current' }).data().each(function (group, i) {
                if (last !== group) {

                    $(rows).eq(i).before(
                        '<tr class="group  text-left "><td></td><td></td><td></td><td colspan="10">' + group + '</td></tr>'
                    );

                    last = group;
                }
            });
        },
        columns: [
            {
                data: 'groupname',
                // orderable: false,

                render: function (data, type, row) {
                    textdata = '';
                    return textdata;
                },
            },

            {

                data: function (row, type, set) {
                    Name = row['categorynumber'] + ' ' + row['categoryname'];
                    return Name;
                },
                orderable: false,
                render: function (data, type, row) {
                    textdata = '';
                    return textdata;
                },
            },
            {

                data: function (row, type, set) {
                    data = row['typenumber'] + ' ' + row['typename'];
                    return data;
                },
                orderable: false,
                render: function (data, type, row) {
                    textdata = '';
                    return textdata;
                },
            },
            {
                data: function (row, type, set) {

                    textdata = row['typesubnumber'] + " " + row['typesubname'];
                    return textdata;
                },
                orderable: false,
                render: function (data, type, row) {
                    textdata = '';
                    return textdata;
                },
            },
            {

                data: 'list',

                render: function (data, type, row) {
                    textdata = '<div class="text-left">' + row['code'] + " " + row['list'] + '</div>';
                    return textdata;
                },
            },
            {

                data: 'unit',

                render: function (data, type, row) {
                    textdata = row['unit'];
                    return textdata;
                },
            },
            {

                data: 'mcost',

                render: function (data, type, row) {
                    if (row['mcost'] != 0.00) {
                        textdata = row['mcost'];
                    }
                    else { textdata = "-"; }
                    return textdata;
                },
            },
            {

                data: 'wcost',

                render: function (data, type, row) {
                    if (row['wcost'] != 0.00) {
                        textdata = row['wcost'];
                    }
                    else { textdata = "-"; }
                    return textdata;
                },
            },
            {

                data: 'mcostp',

                render: function (data, type, row) {
                    if (row['mcostp'] != 0.00) {
                        textdata = row['mcostp'];
                    }
                    else { textdata = "-"; }
                    return textdata;
                },
            },
            {

                data: 'wcostp',

                render: function (data, type, row) {
                    if (row['wcostp'] != 0.00) {
                        textdata = row['wcostp'];
                    }
                    else { textdata = "-"; }
                    return textdata;
                },
            },
            {

                data: 'comment',


            },
            {

                data: 'id',

            }, {

                data: 'id',
                orderable: false,
                render: function (data, type, row) {
                    textdata = '';
                    return textdata;
                },
            },


        ],

        columnDefs: [{
            data: 'id',
            name: 'id',
            targets: 11,
            orderable: false,
            render: function (data, type, row) {
                var dataName = row['code'] + " " + row['list'];
                var btnEdit = '<a href="#" data-href="' + APP_URL + '/boq/form/' + data + '" data-modal-name="ajaxModal" data-name="' + dataName + '"   data-id="' + data + '" class="btn btn-outline-dark btn-sm btn-edit" title="แก้ไข"><i class="fa fa-edit"></i></a> ';
                var btnDelete = '<a href="#" data-href="' + APP_URL + '/boq/' + data + '" data-id="' + data + '" data-name="' + dataName + '"  class="btn btn-outline-danger btn-sm btn-delete" title="ลบ"><i class="fa fa-trash"></i></a>';
                return btnEdit + btnDelete;
            },
        }],


    });
    // $('#categorysub-table').on('click', 'tr.group', function () {
    //     var currentOrder = table.order()[0];
    //     if (currentOrder[0] === 0 && currentOrder[0] === 'asc') {
    //         table.order([1, 'desc']).draw();
    //     }
    //     else {
    //         table.order([1, 'asc']).draw();
    //     }
    // });
    /* handle validate */
    $('#ajaxModal').on('shown.bs.modal', function (e) {
        $('#saveForm').validate({
            submitHandler: function (form) {
                var id = $('input[name=id]').val();
                var url = APP_URL + '/boq';
                saveForm(id, url, table);
            },
            rules: {
                code: {
                    required: true
                },
                list: {
                    required: true
                },

                unit: {
                    required: true
                },
                part: {
                    required: true
                },
                group: {
                    required: true
                },
                category: {
                    required: true
                },
                type: {
                    required: true
                },
                typesub: {
                    required: true
                },
                unit: {
                    required: true
                },
                mcost: {
                    required: true
                },
                wcost: {
                    required: true
                },
                mcostp: {
                    required: true
                },
                wcostp: {
                    required: true
                },
                price: {
                    required: true
                }
            },
            messages: {},
            errorElement: 'span',
            errorPlacement: function (error, element) {
                error.addClass("error-block");
                error.addClass("invalid-feedback");
                if (element.prop("type") === "checkbox") {
                    error.insertAfter(element.parent("label"));
                } else if (element.parent('.input-group').length) {
                    error.insertAfter(element.parent()); /* radio checkbox? */
                } else if (element.hasClass('select2')) {
                    error.insertAfter(element.next('span')); /* select2 */
                } else {
                    error.insertAfter(element);
                }
            },
            highlight: function (element, errorClass, validClass) {
                $(element).parents('.form-group').addClass('has-error').removeClass('has-success');
                $(element).addClass('is-invalid').removeClass('is-valid');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).parents('.form-group').addClass('has-success').removeClass('has-error');
                $(element).addClass('is-valid').removeClass('is-invalid');
            }
        });

        e.preventDefault();
        $('#saveForm2').validate({
            submitHandler: function (form) {



                var id = $('input[name=id]').val();
                var url = APP_URL + '/boq/addchange';

                saveForm2(id, url, table);
            },
            rules: {

                mcost: {
                    required: true
                },
                wcost: {
                    required: true
                },
                price: {
                    required: true
                },
                detail: {
                    required: true
                }
            },
            messages: {},
            errorElement: 'span',
            errorPlacement: function (error, element) {
                error.addClass("error-block");
                error.addClass("invalid-feedback");
                if (element.prop("type") === "checkbox") {
                    error.insertAfter(element.parent("label"));
                } else if (element.parent('.input-group').length) {
                    error.insertAfter(element.parent()); /* radio checkbox? */
                } else if (element.hasClass('select2')) {
                    error.insertAfter(element.next('span')); /* select2 */
                } else {
                    error.insertAfter(element);
                }
            },
            highlight: function (element, errorClass, validClass) {
                $(element).parents('.form-group').addClass('has-error').removeClass('has-success');
                $(element).addClass('is-invalid').removeClass('is-valid');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).parents('.form-group').addClass('has-success').removeClass('has-error');
                $(element).addClass('is-valid').removeClass('is-invalid');
            }
        });
    });

    /* handle delete */
    $('body').on('click', '.btn-delete', function (e) {
        e.preventDefault();
        var url = $(this).data('href');
        var name = $(this).data('name');
        var callback = function () {
            deleteForm(url, table);
        }

        confirmBox('ลบข้อมูล ' + name, callback);
    });
});
