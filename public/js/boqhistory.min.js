var app = new Vue({
    el: '#app',
    data: {
        data: {}
    }
});
$(document).ready(function () {
    $.ajaxSetup({
        headers: {
            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        }
    });
    $('#cbody').hide();
    // $('#country').change(function () {
    //     $('#state').val('');
    //     $('#city').val('');
    // });




/* handle tables */
    
    $('#btnFiterSubmitSearch').click(function (e) {
        e.preventDefault();
        //   $('#card-body').show();
        if ($('#history').val()) {

            // alert($('#history').val());
          
            var table = $('#boq-table').DataTable({
                "destroy": true,  
                responsive: true,
                // order: [[1, ""]],
                scrollY: "1000px",
                scrollX: "true",
                scrollCollapse: true,
                processing: true,
                serverSide: true,
                // ajax: APP_URL + '/boq/datatables',
                ajax: {
                    url: APP_URL + '/boq/historytable',
                    data: function (d) {
                        d.history = $('#history').val();
              
                    }
                },
                
                "columnDefs": [
                    { "visible": false, "targets": 0 }
                ],
                //  "order": [[0, 'asc']],
                // "displayLength": 100,
                "drawCallback": function (settings) {
                    var api = this.api();
                    var rows = api.rows({ page: 'current' }).nodes();
                    var last = null;

                    api.column(0, { page: 'current' }).data().each(function (group, i) {
                        if (last !== group) {

                            $(rows).eq(i).before(
                                '<tr class="group table-secondary text-left "><td colspan="10">' + group + '</td></tr>'
                            );

                            last = group;
                        }
                    });
                    api.column(1, { page: 'current' }).data().each(function (group, i) {
                        if (last !== group) {

                            $(rows).eq(i).before(
                                '<tr class="group  text-left "><td></td><td colspan="9">' + group + '</td></tr>'
                            );

                            last = group;
                        }
                    });
                    api.column(2, { page: 'current' }).data().each(function (group, i) {
                        if (last !== group) {

                            $(rows).eq(i).before(
                                '<tr class="group  text-left "><td></td><td></td><td colspan="8">' + group + '</td></tr>'
                            );

                            last = group;
                        }
                    });
                    api.column(3, { page: 'current' }).data().each(function (group, i) {
                        if (last !== group) {

                            $(rows).eq(i).before(
                                '<tr class="group  text-left "><td></td><td></td><td></td><td colspan="7">' + group + '</td></tr>'
                            );

                            last = group;
                        }
                    });
                },
                columns: [
                    {
                        data: 'groupname',
                        // orderable: false,

                        render: function (data, type, row) {
                            textdata = '';
                            return textdata;
                        },
                    },

                    {

                        data: function (row, type, set) {
                            Name = row['categorynumber'] + ' ' + row['categoryname'];
                            return Name;
                        },
                        orderable: false,
                        render: function (data, type, row) {
                            textdata = '';
                            return textdata;
                        },
                    },
                    {

                        data: function (row, type, set) {
                            data = row['typenumber'] + ' ' + row['typename'];
                            return data;
                        },
                        orderable: false,
                        render: function (data, type, row) {
                            textdata = '';
                            return textdata;
                        },
                    },
                    {
                        data: function (row, type, set) {

                            textdata = row['typesubnumber'] + " " + row['typesubname'];
                            return textdata;
                        },
                        orderable: false,
                        render: function (data, type, row) {
                            textdata = '';
                            return textdata;
                        },
                    },
                    {

                        data: 'list',

                        render: function (data, type, row) {
                            textdata = '<div class="text-left">' + row['code'] + " " + row['list'] + '</div>';
                            return textdata;
                        },
                    },
                    {

                        data: 'mcost',

                        render: function (data, type, row) {
                            if (row['mcost'] != 0.00) {
                                textdata = row['mcost'];
                            }
                            else { textdata = "-"; }
                            return textdata;
                        },
                    },
                    {

                        data: 'mcostc',

                        render: function (data, type, row) {
                            if (row['mcostc'] != 0.00) {
                                textdata = row['mcostc'];
                            }
                            else { textdata = "-"; }
                            return textdata;
                        },
                    },
                    {

                        data: 'wcost',

                        render: function (data, type, row) {
                            if (row['wcost'] != 0.00) {
                                textdata = row['wcost'];
                            }
                            else { textdata = "-"; }
                            return textdata;
                        },
                    },
                    {

                        data: 'wcostc',

                        render: function (data, type, row) {
                            if (row['wcostc'] != 0.00) {
                                textdata = row['wcostc'];
                            }
                            else { textdata = "-"; }
                            return textdata;
                        },


                    },
                     {

                        data: 'id',
                        orderable: false,
                        render: function (data, type, row) {
                            textdata = '';
                            return textdata;
                        },
                    },


                ],

              


            });
            $('#boq-table').DataTable().draw(true);
            $('#cbody').show();
        } else {
            var table = $('#boq-table').DataTable({
                "destroy": true
            });  
            $('#cbody').hide();
            $('#boq-table').DataTable().draw(false);
        } 
        //alert('ssss');
    });
    
    // $('#categorysub-table').on('click', 'tr.group', function () {
    //     var currentOrder = table.order()[0];
    //     if (currentOrder[0] === 0 && currentOrder[0] === 'asc') {
    //         table.order([1, 'desc']).draw();
    //     }
    //     else {
    //         table.order([1, 'asc']).draw();
    //     }
    // });
    /* handle validate */
    

    /* handle delete */
    
});
